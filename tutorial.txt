Aula 10/09 

GIT e GITHUB

Comandos básicos do git:

git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório
git add .
git commit -m "tutorial"
git push
git status (Verifica o status do respositório)
git pull (Sincronza as informações do respositório)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

_________________________________________________________

Aula 12/09 

Boas práticas na programação:
    1) Cabeçalho de documentação usando > /** 
    2) Nomes de arquivos, variáveis, funções, classes e etc.
       Regras: 
      - Clean Code (Declarar nomes que tenham relação com o problema) Ç, Assentos e Caracteres especiais, estão banidos para declaração de nomes. 
      - Apenas Classes iniciam com letra Maiúscula.
      - Não iniciar um nome com número.
      - Quando for declarar dois nomes, usar a técnica do camelo: nomecliente -> nomeCliente 

       To be Continued...

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Comandos Básicos do MS-DOS:

cls -> Limpar a tela
dir -> Listar arq do diretórios
cd nome_diretório -> Entrar no diretório
cd .. -> Voltar para o diretório anterior

              To be Continued...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Node.js: Plataforma que permite execusão do JavaScript fora do browser de internet. 
        (https://nodejs.org/en/download/package-manager?utm_cta=website-data-cloud-dummies)
        Obs: Sempre usar/baixar versão LTS
        
        Comandos para confirmação: 
        node -v: Diz a versão instalada
    
 npm: Gerenciador de Pacotes (Biblioteca, extensões etc.)
        (https://www.npmjs.com/)
        Exp: colors.js
        Obs: npm está relacionado a pasta do projeto. (São instalados na raiz do projeto e não no sistema)

        Comandos para confirmação: 
        npm -v: Diz a versão instalada
        npm ls: Lista pacotes instalados
        npm init: Inicia um novo projeto de JavaScript
                  Cria um arquivo de nome package.json

_________________________________________________________
Aula 13/09

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, 
ele não pode ser alterado durante a execução do programa.

Por que usar constantes?

Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.

Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando 
a manutenção do código.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante 
a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme 
o programa roda.

Por que usar variáveis?
-Para guardar informações que você vai precisar mais tarde.
-Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

*Nas linguagens de programação as variáveis são tipadas ou dinamicamente tipadas.

*Existem 3 tipos de variáveis indepentende da linguagem: 

String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> True or False


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Comandos JavaScript: (Sintaxe)                             

console.log() -> Escrever no console
console.clear() -> Limpar a tela do console
const -> Criar/Declarar uma constante
let -> Criar/Declarar uma variável
typeof() -> Verificar o tipo de variável

           To be Continued...

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
